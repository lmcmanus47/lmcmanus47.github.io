fitness.fun(zi[h],rmax=rmax,TC=TC[h],Nall=Nall,w=w[h],alphas=alphas,mort=mort[h],mpa=mpa,mortality.model=mortality.model,spp=spp,growth=growth)
ints<-alphas*Nall
ints
sum.ints<-apply(ints,MARGIN=2,sum)
sun.ints
sum.ints
Nall2 = 0.9
ints <- alphas * Nall2
ints
is.null(dim(ints))
help(apply)
help(grad)
fitness.fun(zi,rmax=rmax,TC=TC,Nall=Nall,w=w,alphas=alphas,mort=mort,mpa=mpa,mortality.model=mortality.model,spp=spp,growth=growth)
w <- c(1,1,1)
alphas <- rep(0,(3,3))
alphas <- 	matrix(0,nrow=3,ncol=3)
alphas
Nall
Nall <- c(.3,.3,.3)
mort <- (.2,.2,.2)
mort <- c(.2,.2,.2)
fitness.fun(zi,rmax=rmax,TC=TC,Nall=Nall,w=w,alphas=alphas,mort=mort,mpa=mpa,mortality.model=mortality.model,spp=spp,growth=growth)
fitness.fun(zi[h],rmax=rmax,TC=TC[h],Nall=Nall,w=w[h],alphas=alphas,mort=mort[h],mpa=mpa,mortality.model=mortality.model,spp=spp,growth=growth)
mort
fitness.fun(zi,rmax=rmax,TC=TC,Nall=Nall,w=w,alphas=alphas,mort=mort,mpa=mpa,mortality.model=mortality.model,spp=spp,growth=growth)
library(deSolve)
library(numDeriv)
library(doSNOW)
library(doParallel)
library(foreach)
library(rbenchmark)
library(fitdistrplus)
library(logitnorm)
library(matrixcalc)
library(mvtnorm)
help(hessian)
help(*)
test = [1,2,3]
test <- c(1,2,3,4,5)
test
test[1:3]
help(skew.norm)
library(deSolve)
library(numDeriv)
library(doSNOW)
library(doParallel)
library(foreach)
library(rbenchmark)
library(fitdistrplus)
library(logitnorm)
library(matrixcalc)
library(mvtnorm)
help(skew.norm)
# Set initialization parameters
nsp<-3                        # how many species in model?
size<-60                      # how many reefs in model?
burnin<-1500                  # How long to run burn-in period?
runtime<-500                 # How long to run management/environmental change period?
mid<-27                       # mean temperature across all reefs at start of simulation.
range<-3                      # range of temperatures across reefs at start of simulation
sptype<-c(1,1,2)
species<-c("C1","C2","MA")
iterations<-50 # Number of stochastic iterations
#monitor.yrs<-c(10,20,30,40,50,100,250,500)
monitor.yrs<-c(20,50,100,500)
coralgrowth<-1
algaegrowth<-1
# MPAamount<-0.2
temp.stoch<-1.2
mdim<-size
lindec<-exp(seq(0,-5,length=mdim))# Decrease the second value to reduce the range of correlation
ma<-matrix(0,nrow=mdim,ncol=mdim)
ma[,1]<-lindec
for(i in 2:mdim){
ma[-c(1:(i-1)),i]<-lindec[1:(mdim-(i-1))]
}
ma<-ma+t(ma)-diag(nrow(ma))
is.positive.definite(ma) # Is the matrix positive definite? Needs to be.
install.packages(c("foreach","doParallel","deSolve","numDeriv","rbenchmark",
"doSNOW","fitdistrplus","logitnorm","matrixcalc","mvtnorm",
"mail"))
# Read in data files and source functions
source("Norberg_Functions.r")
start.parm.mat<-read.csv("Norberg_StartingParameters_test.csv",header=T,row.names=1) # Matrix of parameter values to be filled from "scenarios"
scenarios<-read.csv("Norberg_StartingParameters_iterationlist_reservesize_SA.csv",header=T)[1:45,] # Each row contains parameter values for one scenario. Column headers identify parameter.
nscen<-nrow(scenarios)
uniqueburns<-length(unique(scenarios$Scenario))
modname<-"Base"
# Create Multivariate normal covariance matrix for temperature anomalies
mdim<-size
lindec<-exp(seq(0,-5,length=mdim))# Decrease the second value to reduce the range of correlation
ma<-matrix(0,nrow=mdim,ncol=mdim)
ma[,1]<-lindec
for(i in 2:mdim){
ma[-c(1:(i-1)),i]<-lindec[1:(mdim-(i-1))]
}
ma<-ma+t(ma)-diag(nrow(ma))
is.positive.definite(ma) # Is the matrix positive definite? Needs to be.
install.packages(c("foreach","doParallel","deSolve","numDeriv","rbenchmark",
"doSNOW","fitdistrplus","logitnorm","matrixcalc","mvtnorm",
"mail"))
ma
is.positive.definite(ma) # Is the matrix positive definite? Needs to be.
ma<-ma+t(ma)-diag(nrow(ma))
is.positive.definite
sds<-rep((.2*temp.stoch),size) # SD of intersite temperature variation
sds
b<-sds%*%t(sds)
b
dim(b)
b*ma
rnorm
help(rnorm)
rnorm(burnin,0,temp.stoch)
dim(rnorm(burnin,0,temp.stoch))
burnin
burnin <- 10
rnorm(burnin,0,temp.stoch)
help(rmvnorm)
rmvnorm
rmvnorm
plot(rnorm(burnin,0,temp.stoch))
install.packages(c("foreach","doParallel","deSolve","numDeriv","rbenchmark",
"doSNOW","fitdistrplus","logitnorm","matrixcalc","mvtnorm",
"mail"))
rmvnorm
anoms.burn<-array(NA,dim=c(size,burnin,iterations))
dim(anoms.burn)
sds<-rep((.2*temp.stoch),size)
sds
b<-sds%*%t(sds)
b
dim(b)
sds
dim(sds)
size<-5# how many reefs in model?
sds<-rep((.2*temp.stoch),size) # SD of intersite temperature variation
sds
size(sds)
sds.size
len(sds)
length(sds)
b<-sds%*%t(sds)
b
dim(b)
install.packages(c("foreach","doParallel","deSolve","numDeriv","rbenchmark",
"doSNOW","fitdistrplus","logitnorm","matrixcalc","mvtnorm",
"mail"))
# Set initialization parameters
nsp<-3                        # how many species in model?
size<-60                      # how many reefs in model?
burnin<-1500                  # How long to run burn-in period?
runtime<-500                 # How long to run management/environmental change period?
mid<-27                       # mean temperature across all reefs at start of simulation.
range<-3                      # range of temperatures across reefs at start of simulation
sptype<-c(1,1,2)
species<-c("C1","C2","MA")
iterations<-50 # Number of stochastic iterations
#monitor.yrs<-c(10,20,30,40,50,100,250,500)
monitor.yrs<-c(20,50,100,500)
coralgrowth<-1
algaegrowth<-1
# MPAamount<-0.2
temp.stoch<-1.2
# Create Multivariate normal covariance matrix for temperature anomalies
mdim<-size
lindec<-exp(seq(0,-5,length=mdim))# Decrease the second value to reduce the range of correlation
ma<-matrix(0,nrow=mdim,ncol=mdim)
ma[,1]<-lindec
for(i in 2:mdim){
ma[-c(1:(i-1)),i]<-lindec[1:(mdim-(i-1))]
}
ma<-ma+t(ma)-diag(nrow(ma))
is.positive.definite(ma)
ma
sds<-rep((.2*temp.stoch),size) # SD of intersite temperature variation
sds
b<-sds%*%t(sds)
b
b
t(sds)
help(t)
help(%)
help(%*%)
b<-sds%*%t(sds)
b
sds
dim(b)
anoms.burn<-array(NA,dim=c(size,burnin,iterations))
anoms.burn
dim(anoms.burn)
anoms.burn(1,1,1)
anoms.burn[1,1,1]
anoms.burn[1,1,]
anoms.burn[1,1,50]
anoms.burn[1,1,51]
anoms.burn[1,1,]
anoms.burn[1,1,:]
anoms.burn[1,1,]
dim(anoms.burn)
help(set.seed)
anoms.runs<-array(NA,dim=c(size,runtime,iterations))
algaemort<-array(NA,dim=c(size,(runtime+burnin),iterations))
dim(anoms.runs)
dim(algaemort)
help(rnorm)
rnorm(burnin,0,temp.stoch)
test <- rnorm(burnin,0,temp.stoch)
dim(test)
test <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)+matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
install.packages(c("foreach","doParallel","deSolve","numDeriv","rbenchmark",
"doSNOW","fitdistrplus","logitnorm","matrixcalc","mvtnorm",
"mail"))
test <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)+matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
install mvtnorm
install.packages('mvtnorm')
library(mvtnorm)
test <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)+matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
spatialtemp<-b*ma # Scales MVN matrix to 0.2 * temp.stoch when temp.stoch=1.2
anoms.burn<-array(NA,dim=c(size,burnin,iterations))
anoms.runs<-array(NA,dim=c(size,runtime,iterations))
algaemort<-array(NA,dim=c(size,(runtime+burnin),iterations))
test <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)+matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
test
dim(test)
help("rmvnorm")
rmvnorm(1.5,0)
rep(0,size)
spatialtemp
dim(spatialtemp)
spatialtemp
burnin
test <- rmvnorm(burnin,rep(0,size),spatialtemp)
test
dim(test)
runtime
test
test <- rmvnorm(burnin,rep(0,size),spatialtemp)
test
min(test)
max(test)
dim(test)
test =  matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)
dim(test)
T
test1 = rnorm(burnin,0,temp.stoch)
dim(test1)
help(matrix)
dim(anoms.burn)
test
min(test)
max(test\)
dim(temp.stoch)
temp.stoch
test = rnorm(burnin,0,temp.stoch)
test
min(test)
max(test)
dim(test)
test2 <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)
dim(test2)
test2
test2[4,5]
test2[end,end]
test2[60,1500]
size
burnin
size <- 5
burnin <- 10
rnorm(burnin,0,temp.stoch)
matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)
nsp<-3                        # how many species in model?
size<-60                      # how many reefs in model?
burnin<-1500                  # How long to run burn-in period?
runtime<-500                 # How long to run management/environmental change period?
mid<-27                       # mean temperature across all reefs at start of simulation.
range<-3                      # range of temperatures across reefs at start of simulation
sptype<-c(1,1,2)
species<-c("C1","C2","MA")
iterations<-50 # Number of stochastic iterations
#monitor.yrs<-c(10,20,30,40,50,100,250,500)
monitor.yrs<-c(20,50,100,500)
coralgrowth<-1
algaegrowth<-1
# MPAamount<-0.2
temp.stoch<-1.2
test <- matrix(rnorm(burnin,0,temp.stoch),nrow=size,ncol=burnin,byrow=T)
test
test[1:2,]
test[0,0]
test[1,1]
test[2,1]
test[3,1]
test[1,2]
test[1,3]
dim(test)
test[1,1]
test[2,1]
test[60,1]
dim(test)
test2 <- matrix(rmvnorm(burnin,rep(0,size),spatialtemp),nrow=size,byrow=T)
dim(test2)
test2[0,0]
test2[1,1]
test2[2,1]
test2[1,2]
test2[1,]
test2[1,:10]
test2[1,1:10]
test2[2,1:10]
dim(test2)
help(runif)
matrix(runif((runtime+burnin)*size,0.05,.3),nrow=size,ncol=runtime+burnin)
runtime <- 10
burnin <- 20
size <- 5
test <- matrix(runif((runtime+burnin)*size,0.05,.3),nrow=size,ncol=runtime+burnin)
dim(test)
test[1,]
test[2,]
min(test)
max(test)
dim(test)
help(switch)
size
mid
rep(mid,size)
hel(seq)
help(seq)
seq((mid-(range)),(mid+range),length.out=size)[sample(size=size,x=seq(1,size),replace=F)])
seq((mid-(range)),(mid+range),length.out=size)[sample(size=size,x=seq(1,size),replace=F)]
test
test <- seq((mid-(range)),(mid+range),length.out=size)[sample(size=size,x=seq(1,size),replace=F)]
test
help("sample")
size
seq((mid-(range)),(mid+range),length.out=size)
test <- load("/Volumes/GoogleDrive/My Drive/Dropbox/CoralModelComparisonData/Scenario1_modout.Rdata")
typeof(test)
class(test)
dim(test)
class(mod.outall)
mod.outall[1,]
dim(mod.outall)
names(mod.outall)
load("/Users/Lisa/Desktop/ecoevo_coral-master/Scenario45_modout.Rdata")
load("Scenario45_modout.rdata") #load the workspace for a single scenario
pwd
getwd
getwd()
test <- 1
load("/Volumes/GoogleDrive/My Drive/Projects/Protein-Hotspots/SDT.rda")
View(SDT)
View(SDT)
load("SDT.rda") # path on Char's machine, will be different on yours
# getwd() # returns pwd (present working directory)
# Extracting lat,long pairs from SDT google database
latlong <- SDT[,c('LatLong')] # change 20 to NA from "country-wide"
row.ids <- which(latlong!="NA" & !is.na(latlong)) # weird NA handling from read_excel but gdata doesn't work reliably
latlong <- latlong[row.ids]
latlong <- as.numeric(unlist(strsplit(latlong, ",")))
# Saving as coordinate data frame
huntRdf <- data.frame(lat=latlong[c(TRUE,FALSE)],
lon=latlong[c(FALSE,TRUE)],
prev=as.numeric(as.character(SDT$Prevalence[row.ids])),
birdN=as.numeric(SDT$BirdDietN[row.ids]),
mammalN=as.numeric(SDT$MammalN[row.ids]),
minMam=as.numeric(SDT$MinMamKG[row.ids]),
maxMam=as.numeric(SDT$MaxMamKG[row.ids]))
# Converting to shapefile
# coords <- SpatialPoints(huntRdf[,1:2]) # not necessary for ggplot and ggmap
huntRdf$prev[14] <- 0.365
# install.packages('ggmap') # only need to run once
library(ggmap)
###=====================================================================
install.packages('ggmap') # only need to run once
library(ggmap)
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
"world2Hires"
glob.base.map <- map_data("world")
# Initial plot
prev.plot <- ggplot()
prev.plot <- prev.plot + geom_polygon(data=glob.base.map, aes(x=long, y = lat, group = group)) + coord_fixed(ratio=1.2)
prev.plot <- prev.plot + geom_point(data = huntRdf, aes(x = lon, y = lat, color=prev), size = 2) + scale_color_gradient2(low="seagreen",mid="gold",high="darkorchid",midpoint=0.5, na.value = "transparent")
prev.plot <- prev.plot + labs(x="Longitude",y="Latitude",color="Prevalence")  +
theme(legend.position="top",text=element_text(family="Arial",size=16),axis.text.x  = element_text(size=16),legend.text=element_text(size=10),legend.title=element_text(size=16))
prev.plot
"world2Hires"
glob.base.map <- map_data("world")
# Initial plot
prev.plot <- ggplot()
prev.plot <- prev.plot + geom_polygon(data=glob.base.map, aes(x=long, y = lat, group = group)) + coord_fixed(ratio=1.2)
prev.plot <- prev.plot + geom_point(data = huntRdf, aes(x = lon, y = lat, color=prev), size = 2) + scale_color_gradient2(low="seagreen",mid="gold",high="darkorchid",midpoint=0.5, na.value = "transparent")
prev.plot <- prev.plot + labs(x="Longitude",y="Latitude",color="Prevalence")  +
theme(legend.position="top",text=element_text(family="Arial",size=16),axis.text.x  = element_text(size=16),legend.text=element_text(size=10),legend.title=element_text(size=16))
prev.plot
glob.base.map <- map_data("world")
# Initial plot
prev.plot <- ggplot()
prev.plot <- prev.plot + geom_polygon(data=glob.base.map, aes(x=long, y = lat, group = group)) + coord_fixed(ratio=1.2)
prev.plot <- prev.plot + geom_point(data = huntRdf, aes(x = lon, y = lat, color=prev), size = 2) + scale_color_gradient2(low="seagreen",mid="gold",high="darkorchid",midpoint=0.5, na.value = "transparent")
prev.plot <- prev.plot + labs(x="Longitude",y="Latitude",color="Prevalence")  +
theme(legend.position="top",text=element_text(family="Arial",size=16),axis.text.x  = element_text(size=16),legend.text=element_text(size=10),legend.title=element_text(size=16))
prev.plot
help(t)
Nall <- c(0.2,0.2,0.2)
Nall
p_all<-t(t(Nall)/colSums(Nall))
a.matrix <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
a.matrix
p_all<-t(t(Nall)/colSums(Nall))
an.array <- array(0, dim = c(2, 2))
an.array
array <- an.array
array
array[1]=0.2
array
array[1,2]=0.5
array
array[2,1]=0.3
array[2,2]=0.4
array
p_all<-t(t(Nall)/colSums(Nall))
Nall <- array
p_all<-t(t(Nall)/colSums(Nall))
p_all
p_all.add<-cbind(p_all[,1],p_all)
p_all
p_all.add
p_all
test = colSums(p_all)
test
test2 = rowSums(p_all)
test2
array2 <- array(0, dim = c(2, 2))
array2
array[1,1]=25
array[1,2]=30
array[2,1]=27
array[2,2]=22
array2 <- array
Nall
Zall <- array2
Zall
p_all<-t(t(Nall)/colSums(Nall))
p_all
p_all.add<-cbind(p_all[,1],p_all)
p_all.add
dpdt<-t(apply(p_all.add,MARGIN=1,FUN=diff))
dpdt
eco<-colSums(Zall*dpdt)
eco
Zall.add<-cbind(Zall[,1],Zall)
Zall.add
dZ.dt<-t(apply(Zall.add,MARGIN=1,FUN=diff))
dZ.dt
p_all
install.packages(c("survival", "survminer"))
library("survival")
library("survminer")
install.packages("blogdown")
blogdown::new_site(theme = "gcushen/hugo-academic",
sample = TRUE,
theme_example = TRUE,
empty_dirs = TRUE,
to_yaml = TRUE)
region <- "Caribbean"
if region == "Caribbean":
print 1
if region == "Caribbean":
print "1"
if region == "Caribbean":
print(1)
if region == "Caribbean":
print(1)
if region == "Caribbean":
print(1)
if (region == "Caribbean"):
print(1)
if (region == "Caribbean")
print(1)
if (region == "Caribbean"){
print(1)
}
if (region == "Caribbean"){
print(1)
}
str1 = 'Hello'
str2 = 'World!'
# concatenate two strings using paste function
result = paste(str1,str2)
print (result)
list = c("deltaSST", "DS", "ITM")
list
parse(list)
paste(list, collapse = '')
paste(list, collapse = +)
paste(list, collapse = "+")
paste(list, collapse = " +")
paste(list, collapse = " + ")
paste(list, collapse = "+")
set.seed(1)
data(iris)
iris.rf <- randomForest(Species ~ ., iris, keep.forest=FALSE)
rmarkdown::render_site()
pwd
setwd("/Projects/Website/lmcmanus47.github.io")
setwd("~/Projects/Website/lmcmanus47.github.io")
rmarkdown::render_site()
