#  newSN = 1-newIN
SM[t+1] = newSM
SN[t+1] = newSN
IM[t+1] = newIM
IN[t+1] = newIN
EM[t+1] = newEM
EN[t+1] = newEN
WM[t+1] = new(newWM)
WN[t+1] = new(newWN)
}
return(list(t=thx, SM=SM,SN=SN, IM=IM, IN=IN, WM=WM, WN=WN, EM=EM, EN=EN, C=SM+IM+SN+IN))
}
disease_model_MPA <- function (tmax=365*50, H =5000, S0M=0.3, S0N = 0.3, I0M=0, I0N=0, E0M = 0.1, E0N=0.1, W0M=100, W0N=100,es=.00001, dw=.01,
nu=0.00001, lambdaM = 100, lambdaN=200, m=.0002, ei=.0005)
{
thx = 1:(tmax+1)
SM = numeric(tmax+1)# the history of S MPA
SN = numeric(tmax+1) #the history of S Non-MPA
IM = numeric(tmax+1) # history of I MPA
IN = numeric(tmax+1) # history of I Non-MPA
EM = numeric(tmax+1) # history of E MPA
EN = numeric(tmax+1) # history of E Non-MPA
WM = numeric(tmax+1) # history of W MPA
WN = numeric(tmax+1) # history of W Non-MPA
SM[1] = S0M
IM[1] = I0M
WM[1] = W0M
EM[1] = E0M
EN[1] = E0N
SN[1] = S0N
IN[1] = I0N
WN[1] = W0N
## newfraction(x) implements demographic stochasticity, taking expected
##   metapopulation fractions, and converting them to n/H
##   where n is the number of local patches in the relevant state, and
##   H is the total number of patches.
newfraction = function(x)
{  n = rpois(1,H*x)
newx = min(n/H, 1)
if (n < 3) return(newx) else return(x)
}
foi = function(WM, WN)
{  return(1-(exp(-nu*WM)))
return(1-(exp(-nu*WN)))
if(missing(WN)) {
WM
} else {
WN
}
}
##new(x) implements demographic stochasticity for the pathogen population
new = function(newWM, newWN)
{  if (newWM<3) return(rpois(1,newWM)) else return(newWM)
if (newWN<3) return(rpois(1,newWN)) else return(newWN)
if(missing(newWN)) {
newWM
} else {
newWN
}
}
## main simulation loop
for(t in 1:tmax)
{  forceM=foi(WM[t])
forceN=foi(WN[t])
newSM = newfraction(SM[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) -es*(SM[t])-(forceM + forceN)*SM[t])
newSN = newfraction(SN[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) -es*(SN[t])-(forceM + forceN)*SN[t])
newIM = newfraction(IM[t] + (forceM + forceN)*SM[t] -ei*IM[t])
newIN = newfraction(IN[t] + (forceM + forceN)*SN[t] -ei*IN[t])
newEM = newfraction(1 - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) + es*(SM[t] + ei*IM[t]))
newEN = newfraction(1 - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) + es*(SN[t] + ei*IN[t]))
newWM = WM[t] +lambdaM*IM[t] -dw*WM[t]
newWN = WN[t] +lambdaN*IN[t] -dw*WN[t]
newC = newSM + newSN + newIM + newIN
# I think this part is to prevent overshooting but its currently not implemented properly
#if(newC > 1)
#  newSM = 1-newIM
#  newSN = 1-newIN
SM[t+1] = newSM
SN[t+1] = newSN
IM[t+1] = newIM
IN[t+1] = newIN
EM[t+1] = newEM
EN[t+1] = newEN
WM[t+1] = new(newWM)
WN[t+1] = new(newWN)
}
return(list(t=thx, SM=SM,SN=SN, IM=IM, IN=IN, WM=WM, WN=WN, EM=EM, EN=EN, C=SM+IM+SN+IN))
}
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 50, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 5, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 0, lambdaN=100, tmax=1000))
#### Plot results for total infected (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM+IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM+IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM+IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM+IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM+IN), color = "blue")
library(tidyverse)
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 50, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 5, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 0, lambdaN=100, tmax=1000))
#### Plot results for total infected (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM+IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM+IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM+IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM+IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM+IN), color = "blue")
#### Try different initial conditions (fraction of) while labmdaM < lambdaN
output1 <- data.frame(disease_model_MPA(S0M=0.2, S0N = 0.2,lambdaM = 10, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.15, S0N = 0.25,lambdaM = 10, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.3,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.05, S0N = 0.35,lambdaM = 10, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.39, S0N = 0.4,lambdaM = 10, lambdaN=100, tmax=1000))
View(output5)
#### Try different initial conditions (fraction of) while labmdaM < lambdaN
output1 <- data.frame(disease_model_MPA(S0N=0.2, S0M = 0.2,lambdaM = 10, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0N=0.15, S0M = 0.25,lambdaM = 10, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0N=0.1, S0M = 0.3,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0N=0.05, S0M = 0.35,lambdaM = 10, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0N=0.01, S0M = 0.39,lambdaM = 10, lambdaN=100, tmax=1000))
#### Plot results for total infected (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM+IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM+IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM+IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM+IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM+IN), color = "blue")
#### Plot results for infected non-MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "blue")
#### Plot results for infected MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "blue")
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 50, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 5, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 0, lambdaN=100, tmax=1000))
#### Plot results for total infected (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM+IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM+IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM+IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM+IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM+IN), color = "blue")
#### Plot results for total susceptible (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = SM+SN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = SM+SN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = SM+SN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = SM+SN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = SM+SN), color = "blue")
#### Plot results for infected MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "blue")
#### Plot results for infected non-MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "blue")
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
#### Plot results for all site types in output1
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output1, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output1, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output1, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output1, mapping= aes(x = t, y = EN), color = "purple")
disease_model_MPA <- function (tmax=365*50, H =5000, S0M=0.3, S0N = 0.3, I0M=0, I0N=0, E0M = 0.1, E0N=0.1, W0M=100, W0N=100,es=.00001, dw=.01,
nu=0.00001, lambdaM = 100, lambdaN=200, m=.0002, ei=.0005)
{
thx = 1:(tmax+1)
SM = numeric(tmax+1)# the history of S MPA
SN = numeric(tmax+1) #the history of S Non-MPA
IM = numeric(tmax+1) # history of I MPA
IN = numeric(tmax+1) # history of I Non-MPA
EM = numeric(tmax+1) # history of E MPA
EN = numeric(tmax+1) # history of E Non-MPA
WM = numeric(tmax+1) # history of W MPA
WN = numeric(tmax+1) # history of W Non-MPA
SM[1] = S0M
IM[1] = I0M
WM[1] = W0M
EM[1] = E0M
EN[1] = E0N
SN[1] = S0N
IN[1] = I0N
WN[1] = W0N
## newfraction(x) implements demographic stochasticity, taking expected
##   metapopulation fractions, and converting them to n/H
##   where n is the number of local patches in the relevant state, and
##   H is the total number of patches.
newfraction = function(x)
{  n = rpois(1,H*x)
newx = min(n/H, 1)
if (n < 3) return(newx) else return(x)
}
foi = function(WM, WN)
{  return(1-(exp(-nu*WM)))
return(1-(exp(-nu*WN)))
if(missing(WN)) {
WM
} else {
WN
}
}
##new(x) implements demographic stochasticity for the pathogen population
new = function(newWM, newWN)
{  if (newWM<3) return(rpois(1,newWM)) else return(newWM)
if (newWN<3) return(rpois(1,newWN)) else return(newWN)
if(missing(newWN)) {
newWM
} else {
newWN
}
}
## main simulation loop
for(t in 1:tmax)
{  forceM=foi(WM[t])
forceN=foi(WN[t])
newSM = newfraction(SM[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) -es*(SM[t])-(forceM + forceN)*SM[t])
newSN = newfraction(SN[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) -es*(SN[t])-(forceM + forceN)*SN[t])
newIM = newfraction(IM[t] + (forceM + forceN)*SM[t] -ei*IM[t])
newIN = newfraction(IN[t] + (forceM + forceN)*SN[t] -ei*IN[t])
newEM = newfraction(1 - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) + es*(SM[t] + ei*IM[t]))
newEN = newfraction(1 - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) + es*(SN[t] + ei*IN[t]))
newWM = WM[t] +lambdaM*IM[t] -dw*WM[t]
newWN = WN[t] +lambdaN*IN[t] -dw*WN[t]
newC = newSM + newSN + newIM + newIN
# I think this part is to prevent overshooting but its currently not implemented properly
#if(newC > 1)
#  newSM = 1-newIM
#  newSN = 1-newIN
SM[t+1] = newSM
SN[t+1] = newSN
IM[t+1] = newIM
IN[t+1] = newIN
EM[t+1] = newEM
EN[t+1] = newEN
WM[t+1] = new(newWM)
WN[t+1] = new(newWN)
}
return(list(t=thx, SM=SM,SN=SN, IM=IM, IN=IN, WM=WM, WN=WN, EM=EM, EN=EN, C=SM+IM+SN+IN))
}
disease_model_MPA <- function (tmax=365*50, H =5000, S0M=0.3, S0N = 0.3, I0M=0, I0N=0, E0M = 0.1, E0N=0.1, W0M=100, W0N=100,es=.00001, dw=.01,
nu=0.00001, lambdaM = 100, lambdaN=200, m=.0002, ei=.0005)
{
thx = 1:(tmax+1)
SM = numeric(tmax+1)# the history of S MPA
SN = numeric(tmax+1) #the history of S Non-MPA
IM = numeric(tmax+1) # history of I MPA
IN = numeric(tmax+1) # history of I Non-MPA
EM = numeric(tmax+1) # history of E MPA
EN = numeric(tmax+1) # history of E Non-MPA
WM = numeric(tmax+1) # history of W MPA
WN = numeric(tmax+1) # history of W Non-MPA
SM[1] = S0M
IM[1] = I0M
WM[1] = W0M
EM[1] = E0M
EN[1] = E0N
SN[1] = S0N
IN[1] = I0N
WN[1] = W0N
## newfraction(x) implements demographic stochasticity, taking expected
##   metapopulation fractions, and converting them to n/H
##   where n is the number of local patches in the relevant state, and
##   H is the total number of patches.
newfraction = function(x)
{  n = rpois(1,H*x)
newx = min(n/H, 1)
if (n < 3) return(newx) else return(x)
}
foi = function(WM, WN)
{  return(1-(exp(-nu*WM)))
return(1-(exp(-nu*WN)))
if(missing(WN)) {
WM
} else {
WN
}
}
##new(x) implements demographic stochasticity for the pathogen population
new = function(newWM, newWN)
{  if (newWM<3) return(rpois(1,newWM)) else return(newWM)
if (newWN<3) return(rpois(1,newWN)) else return(newWN)
if(missing(newWN)) {
newWM
} else {
newWN
}
}
## main simulation loop
for(t in 1:tmax)
{  forceM=foi(WM[t])
forceN=foi(WN[t])
newSM = newfraction(SM[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) -es*(SM[t])-(forceM + forceN)*SM[t])
newSN = newfraction(SN[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) -es*(SN[t])-(forceM + forceN)*SN[t])
newIM = newfraction(IM[t] + (forceM + forceN)*SM[t] -ei*IM[t])
newIN = newfraction(IN[t] + (forceM + forceN)*SN[t] -ei*IN[t])
newEM = newfraction((EM[t]) - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) + es*(SM[t] + ei*IM[t]))
newEN = newfraction((EM[t]) - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) + es*(SN[t] + ei*IN[t]))
newWM = WM[t] +lambdaM*IM[t] -dw*WM[t]
newWN = WN[t] +lambdaN*IN[t] -dw*WN[t]
newC = newSM + newSN + newIM + newIN
# I think this part is to prevent overshooting but its currently not implemented properly
#if(newC > 1)
#  newSM = 1-newIM
#  newSN = 1-newIN
SM[t+1] = newSM
SN[t+1] = newSN
IM[t+1] = newIM
IN[t+1] = newIN
EM[t+1] = newEM
EN[t+1] = newEN
WM[t+1] = new(newWM)
WN[t+1] = new(newWN)
}
return(list(t=thx, SM=SM,SN=SN, IM=IM, IN=IN, WM=WM, WN=WN, EM=EM, EN=EN, C=SM+IM+SN+IN))
}
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
#### Plot results for all site types in output1
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output1, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output1, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output1, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output1, mapping= aes(x = t, y = EN), color = "purple")
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 50, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 5, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 0, lambdaN=100, tmax=1000))
#### Plot results for all site types in output1
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output1, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output1, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output1, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output1, mapping= aes(x = t, y = EN), color = "purple")
#### Plot results for all site types in output5
ggplot() +
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output5, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output5, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output5, mapping= aes(x = t, y = EN), color = "purple")
View(output5)
disease_model_MPA <- function (tmax=365*50, H =5000, S0M=0.3, S0N = 0.3, I0M=0, I0N=0, E0M = 0.1, E0N=0.1, W0M=100, W0N=100,es=.00001, dw=.01,
nu=0.00001, lambdaM = 100, lambdaN=200, m=.0002, ei=.0005)
{
thx = 1:(tmax+1)
SM = numeric(tmax+1)# the history of S MPA
SN = numeric(tmax+1) #the history of S Non-MPA
IM = numeric(tmax+1) # history of I MPA
IN = numeric(tmax+1) # history of I Non-MPA
EM = numeric(tmax+1) # history of E MPA
EN = numeric(tmax+1) # history of E Non-MPA
WM = numeric(tmax+1) # history of W MPA
WN = numeric(tmax+1) # history of W Non-MPA
SM[1] = S0M
IM[1] = I0M
WM[1] = W0M
EM[1] = E0M
EN[1] = E0N
SN[1] = S0N
IN[1] = I0N
WN[1] = W0N
## newfraction(x) implements demographic stochasticity, taking expected
##   metapopulation fractions, and converting them to n/H
##   where n is the number of local patches in the relevant state, and
##   H is the total number of patches.
newfraction = function(x)
{  n = rpois(1,H*x)
newx = min(n/H, 1)
if (n < 3) return(newx) else return(x)
}
foi = function(WM, WN)
{  return(1-(exp(-nu*WM)))
return(1-(exp(-nu*WN)))
if(missing(WN)) {
WM
} else {
WN
}
}
##new(x) implements demographic stochasticity for the pathogen population
new = function(newWM, newWN)
{  if (newWM<3) return(rpois(1,newWM)) else return(newWM)
if (newWN<3) return(rpois(1,newWN)) else return(newWN)
if(missing(newWN)) {
newWM
} else {
newWN
}
}
## main simulation loop
for(t in 1:tmax)
{  forceM=foi(WM[t])
forceN=foi(WN[t])
newSM = newfraction(SM[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) -es*(SM[t])-(forceM + forceN)*SM[t])
newSN = newfraction(SN[t] +m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) -es*(SN[t])-(forceM + forceN)*SN[t])
newIM = newfraction(IM[t] + (forceM + forceN)*SM[t] -ei*IM[t])
newIN = newfraction(IN[t] + (forceM + forceN)*SN[t] -ei*IN[t])
newEM = newfraction((EM[t]) - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EM[t]) + es*(SM[t] + ei*IM[t]))
newEN = newfraction((EN[t]) - m*(SM[t]+IM[t]+SN[t]+IN[t])*(EN[t]) + es*(SN[t] + ei*IN[t]))
newWM = WM[t] +lambdaM*IM[t] -dw*WM[t]
newWN = WN[t] +lambdaN*IN[t] -dw*WN[t]
newC = newSM + newSN + newIM + newIN
# I think this part is to prevent overshooting but its currently not implemented properly
#if(newC > 1)
#  newSM = 1-newIM
#  newSN = 1-newIN
SM[t+1] = newSM
SN[t+1] = newSN
IM[t+1] = newIM
IN[t+1] = newIN
EM[t+1] = newEM
EN[t+1] = newEN
WM[t+1] = new(newWM)
WN[t+1] = new(newWN)
}
return(list(t=thx, SM=SM,SN=SN, IM=IM, IN=IN, WM=WM, WN=WN, EM=EM, EN=EN, C=SM+IM+SN+IN))
}
#### Try different lambdaM while holding lambda N constant
output1 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 100, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 50, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 5, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0M=0.1, S0N = 0.1,lambdaM = 0, lambdaN=100, tmax=1000))
#### Plot results for all site types in output1
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output1, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output1, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output1, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output1, mapping= aes(x = t, y = EN), color = "purple")
#### Plot results for all site types in output5
ggplot() +
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output5, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output5, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output5, mapping= aes(x = t, y = EN), color = "purple")
#### Plot results for all site types in output5
ggplot() +
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output5, mapping= aes(x = t, y = SM), color = "yellow")+
geom_point(data = output5, mapping= aes(x = t, y = SN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = EM), color = "blue")+
geom_point(data = output5, mapping= aes(x = t, y = EN), color = "purple")
#### Try different initial conditions (fraction of) while labmdaM < lambdaN
output1 <- data.frame(disease_model_MPA(S0N=0.2, S0M = 0.2,lambdaM = 10, lambdaN=100, tmax=1000))
output2 <- data.frame(disease_model_MPA(S0N=0.15, S0M = 0.25,lambdaM = 10, lambdaN=100, tmax=1000))
output3 <- data.frame(disease_model_MPA(S0N=0.1, S0M = 0.3,lambdaM = 10, lambdaN=100, tmax=1000))
output4 <- data.frame(disease_model_MPA(S0N=0.05, S0M = 0.35,lambdaM = 10, lambdaN=100, tmax=1000))
output5 <- data.frame(disease_model_MPA(S0N=0.01, S0M = 0.39,lambdaM = 10, lambdaN=100, tmax=1000))
#### Plot results for total infected (MPA + non-MPA) sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM+IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM+IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM+IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM+IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM+IN), color = "blue")
#### Plot results for infected MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IM), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IM), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IM), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IM), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IM), color = "blue")
#### Plot results for infected non-MPA sites
ggplot() +
geom_point(data = output1, mapping= aes(x = t, y = IN), color = "red")+
geom_point(data = output2, mapping= aes(x = t, y = IN), color = "orange")+
geom_point(data = output3, mapping= aes(x = t, y = IN), color = "yellow")+
geom_point(data = output4, mapping= aes(x = t, y = IN), color = "green")+
geom_point(data = output5, mapping= aes(x = t, y = IN), color = "blue")
setwd("~/Projects/Website/lmcmanus47.github.io")
rmarkdown::render_site()
